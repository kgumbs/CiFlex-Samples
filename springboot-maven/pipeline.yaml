info:
  client: samples
  project: springboot-maven
metadata:
  PROJECT_WORKSPACE: springboot-maven
  COMPUTE_TYPE: small
notification:
  enabled: true
  events:
    - PIPELINE_EXECUTION_FAILED
    - PIPELINE_EXECUTION_STARTED
  emailAddress:
    - kwesigumbs@hotmail.com  
source:
  type: CodeStar
  codeStar:
    branch: main
    repository: kgumbs/ciflex-samples
    codeStarArn: >-
      arn:aws:codestar-connections:us-east-1:340717391351:connection/a43a9fd1-d254-479d-bcf4-cf3fc443a503
stages:
  - stageName: BuildStage
    pluginName: 3.9-Maven
    pluginAliasName: OpenJDK
    outputDirectory:
      - target
    commands:
      - >-
        if [ -z "${BUILD_NUMBER:-}" ];then export
        BUILD_NUMBER=1.0.${CODEBUILD_BUILD_NUMBER};fi
      - './mvnw clean install compile test package -Drevision=${BUILD_NUMBER}'
    partialBuildSpecFile: yaml/build-reports.yaml
    post:
      - pluginName: SAST-Codacy
        pluginAliasName: SAST-Codacy
        commands: []
        mappings:
          'BuildStage:OpenJDK':
            - type: output-directory
              value: target
        variables:
          CODACY_API_TOKEN:
            type: SECRETS_MANAGER
            value: 'samples/springboot-maven/codacy/api:token'
          CODACY_PROJECT_TOKEN:
            type: SECRETS_MANAGER
            value: 'samples/springboot-maven/codacy/project:token'
          CODACY_PROJECT_NAME:
            type: PLAINTEXT
            value: shinto-samples
          CODACY_COVERAGE_REPORTS:
            type: PLAINTEXT
            value: target/site/jacoco/jacoco.xml
          CODACY_ORGANIZATION_PROVIDER:
            type: PLAINTEXT
            value: gh
      - pluginName: SAST-Snyk
        pluginAliasName: SAST-Snyk
        commands:
          - 'snyk auth ${SNYK_API_TOKEN}'
          - 'snyk monitor --org=${SNYK_ORG_ID} --file=pom.xml'
        mappings:
          'BuildStage:OpenJDK':
            - type: output-directory
              value: target
        variables:
          SNYK_ORG_ID:
            type: SECRETS_MANAGER
            value: 'samples/springboot-maven/snyk/org:id'
          SNYK_API_TOKEN:
            type: SECRETS_MANAGER
            value: 'samples/springboot-maven/snyk/api:token'
  - stageName: ImageStage
    pluginName: '0.18-Trivy:Maven'
    pluginAliasName: TRIVY-JiB
    metadata:
      '0.18-TRIVY:MAVEN:PRIVILEGED': 'true'
    commands:
      - >-
        if [ -z "${BUILD_NUMBER:-}" ];then export
        BUILD_NUMBER=1.0.${CODEBUILD_BUILD_NUMBER};fi
      - './mvnw jib:dockerBuild -Drevision=${BUILD_NUMBER}'
      - 'export IMAGE_TAG=${BUILD_NUMBER}'
      - 'export IMAGE_TAR_ARCHIVE=target/jib-image.tar'
      - >-
        IMAGE_NAME=$(docker images --format '{{.Repository}} {{.Tag}}' | grep
        ${BUILD_NUMBER} | awk '{print $1}')
      - 'docker save --output ${IMAGE_TAR_ARCHIVE} ${IMAGE_NAME}'
      - >-
        trivy image --input ${IMAGE_TAR_ARCHIVE} --output
        target/image-report.json --format template --template
        "@contrib/asff.tpl"
      - cat target/image-report.json
      - >-
        # aws securityhub batch-import-findings --findings --cli-input-json
        file://target/image-report.json
    mappings:
      'BuildStage:OpenJDK':
        - type: output-directory
          value: target
    outputDirectory:
      - target
    pre:
      - pluginName: '0.18-Trivy:Maven'
        pluginAliasName: TRIVY-Buildpack
        metadata:
          '0.18-TRIVY:MAVEN:PRIVILEGED': 'true'
        commands:
          - >-
            if [ -z "${BUILD_NUMBER:-}" ];then export
            BUILD_NUMBER=1.0.${CODEBUILD_BUILD_NUMBER};fi
          - './mvnw spring-boot:build-image -Drevision=${BUILD_NUMBER}'
          - 'export IMAGE_TAG=${BUILD_NUMBER}'
          - 'export IMAGE_TAR_ARCHIVE=target/buildpack-image.tar'
          - >-
            IMAGE_NAME=$(docker images --format '{{.Repository}} {{.Tag}}' |
            grep ${BUILD_NUMBER} | awk '{print $1}')
          - 'docker save --output ${IMAGE_TAR_ARCHIVE} ${IMAGE_NAME}'
          - >-
            trivy image --input ${IMAGE_TAR_ARCHIVE} --output
            target/image-report.json --format template --template
            "@contrib/asff.tpl"
          - cat target/image-report.json
          - >-
            # aws securityhub batch-import-findings --findings --cli-input-json
            file://target/image-report.json
        mappings:
          'BuildStage:OpenJDK':
            - type: output-directory
              value: target
        outputDirectory:
          - target
    post:
      - pluginName: 4.27-DinD
        pluginAliasName: REGISTRY-DockerHub
        metadata:
          '4.27-DIND:PRIVILEGED': 'true'
        commands:
          - >-
            echo ${DOCKERHUB_ACCESS_TOKEN} | docker login -u
            ${DOCKERHUB_USERNAME} --password-stdin ${DOCKERHUB_URL}
          - 'docker image load --input ${IMAGE_TAR_ARCHIVE}'
          - >-
            IMAGE_NAME=$(docker images --format '{{.Repository}} {{.Tag}}' |
            grep ${IMAGE_TAG} | awk '{print $1}')
          - >-
            docker tag ${IMAGE_NAME}:${IMAGE_TAG}
            ${DOCKERHUB_REPOSITORY}:${IMAGE_NAME}
          - 'docker push ${DOCKERHUB_REPOSITORY}:${IMAGE_NAME}'
        mappings:
          'ImageStage:TRIVY-JiB':
            - type: exported-variable
              value: IMAGE_TAG
            - type: exported-variable
              value: IMAGE_TAR_ARCHIVE
            - type: output-directory
              value: target
        variables:
          DOCKERHUB_URL:
            type: PLAINTEXT
            value: 'https://index.docker.io/v1/'
          DOCKERHUB_REPOSITORY:
            type: PLAINTEXT
            value: kwesigumbs/ciflex-samples
          DOCKERHUB_USERNAME:
            type: SECRETS_MANAGER
            value: 'samples/dockerhub:username'
          DOCKERHUB_ACCESS_TOKEN:
            type: SECRETS_MANAGER
            value: 'samples/dockerhub/access:token'
      - pluginName: 4.27-DinD
        pluginAliasName: REGISTRY-GitHub
        metadata:
          '4.27-DIND:PRIVILEGED': 'true'
        commands:
          - >-
            echo ${GITHUB_TOKEN} | docker login -u
            ${GITHUB_USERNAME} --password-stdin ${GITHUB_URL}
          - 'docker image load --input ${IMAGE_TAR_ARCHIVE}'
          - >-
            IMAGE_NAME=$(docker images --format '{{.Repository}} {{.Tag}}' |
            grep ${IMAGE_TAG} | awk '{print $1}')
          - >-
            docker tag ${IMAGE_NAME}:${IMAGE_TAG}
            ${GITHUB_URL}/${GITHUB_REPOSITORY}:${IMAGE_NAME}
          - 'docker push ${GITHUB_URL}/${GITHUB_REPOSITORY}:${IMAGE_NAME}'
        mappings:
          'ImageStage:TRIVY-Buildpack':
            - type: exported-variable
              value: IMAGE_TAG
            - type: exported-variable
              value: IMAGE_TAR_ARCHIVE
            - type: output-directory
              value: target
        variables:
          GITHUB_URL:
            type: PLAINTEXT
            value: 'ghcr.io'
          GITHUB_REPOSITORY:
            type: PLAINTEXT
            value: kgumbs/ciflex-samples
          GITHUB_USERNAME:
            type: SECRETS_MANAGER
            value: 'samples/github/user:name'
          GITHUB_TOKEN:
            type: SECRETS_MANAGER
            value: 'samples/github/api:token'

